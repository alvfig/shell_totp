#!/bin/bash
# tokens - shows time-based one-time passwords - TOTP
# Depends on oathtool package

# Initial settings
[[ -n "$TOKENSRC" ]] && rc="$TOKENSRC" || rc=~/.tokensrc
[[ -r "$rc" ]] && source "$rc"
[[ -z "$secretsfile" ]] && secretsfile="tokens.secrets"
[[ -z "$barstyle" ]] && barstyle=':.'
XCLIP=""
[[ -z "$XCLIP" ]] && which xclip > /dev/null && XCLIP="xclip"
[[ -z "$XCLIP" ]] && which xsel > /dev/null && XCLIP="xsel"
declare -ar keys=({1..9} {a..z} {A..Z})

# Handle window resizing
trap '((redraw = 1))' SIGWINCH

# Calculate and print the tokens
((lasthalf = -1))
((redraw = 1))
while true; do
    # Eval the time period and verify if must calc the tokens
    ((seconds = $(date '+%-S')))
    ((half = seconds / 30))
    ((remaining = 30 - seconds % 30))
    if ((half != lasthalf)) || ((redraw)); then
        ((redraw = 0))
        if ((half != lasthalf)); then
            # Calculate the tokens
            ((lasthalf = half))
            unset tokens
            declare -A tokens
            ((cnt = 0))
            while read name secret; do
                token=$(oathtool --totp --base32 "$secret")
                tokens[${keys[$cnt]}]="$name $token"
                ((++cnt))
            done < $secretsfile
        fi

        # Format in columns
        ((cols = $(tput cols) / 28))
        ((rows = ${#tokens[@]} / cols))
        unset lines
        declare -a lines
        ((line = 0))
        for ((cnt = 0; cnt < ${#tokens[@]}; ++cnt)); do
            key=${keys[$cnt]}
            read name token <<< "${tokens[$key]}"
            printf -v lines[$line] '%s%s) %-10.10s: %s%7s' "${lines[$line]}" \
                "$key" "$name" "$token" ''
            ((line = line < rows? ++line: 0))
        done

        # Print the columns of tokens
        clear
        for ((cnt = 0; cnt < ${#lines[@]}; ++cnt)); do
            echo "${lines[$cnt]}"
        done
        echo -e '\n0) Exit\n'
    fi

    # Format and print the progress bar
    printf -v bar '%-030.*d' $remaining 0
    printf -v bar '%s' "${bar//0/${barstyle:0:1}}"
    printf -v bar '%s' "${bar// /${barstyle:1:1}}"
    now=$(date '+%Y-%m-%d %H:%M:%S')
    printf '\r   Remaining : %6d %s  %s ' $remaining "$bar" "$now"

    # Check for key press
    read -N 1 -t 1 -s key
    case "$key" in
        "")
            ;;
        0)
            # Exit
            echo
            break
            ;;
        [1-9a-zA-Z])
            # Copy token to clipboard
            if [[ -n "$XCLIP" && -n "${tokens[$key]}" ]]; then
                read name token <<< "${tokens[$key]}"
                $XCLIP -i <<< "$token"
            fi
            ;;
    esac
done
