#!/bin/bash
# tokens - shows time-based one-time passwords - TOTP
# Depends on oathtool package

# Initial settings
rc=${TOKENSRC:-~/.tokensrc}
[[ -r "$rc" ]] && source "$rc"
secretsfile=${secretsfile:-tokens.secrets}
cipherfile="${secretsfile}.cipher"
barstyle=${barstyle:-:.}
XCLIP=""
[[ -z "$XCLIP" ]] && which xclip > /dev/null && XCLIP="xclip"
[[ -z "$XCLIP" ]] && which xsel > /dev/null && XCLIP="xsel"
declare -ar keys=({1..9} {a..z} {A..Z})

# Handle window resizing
trap '((redraw = 1))' SIGWINCH

# Load the secrets
if [[ -f "$cipherfile" ]]; then
    # Decrypt the secrets file
    if ! which openssl > /dev/null; then
        echo "openssl not found" 1>&2
        exit 1
    fi
    read -sp "Enter the passphrase: " pass
    export pass
    origin="openssl enc -aes128 -d -in '$cipherfile' -pass env:pass -pbkdf2"
    sh -c "$origin" > /dev/null
    if [[ 0 != $? ]]; then
        echo 1>&2
        echo "Check the passphrase" 1>&2
        exit 1
    fi
    origin="$origin | gzip -d"
else
    origin="cat '$secretsfile'"
fi
declare -A secrets
((cnt = 0))
while read name secret; do
    secrets[${keys[$cnt]}]="$name $secret"
    ((++cnt))
done < <(sh -c "$origin")
unset pass

# Calculate and print the tokens
((lasthalf = -1))
((redraw = 1))
while true; do
    # Eval the time period and verify if must calc the tokens
    ((seconds = $(date '+%-S')))
    ((half = seconds / 30))
    ((remaining = 30 - seconds % 30))
    if ((half != lasthalf)) || ((redraw)); then
        ((redraw = 0))
        if ((half != lasthalf)); then
            # Calculate the tokens
            ((lasthalf = half))
            unset tokens
            declare -A tokens
            for key in "${!secrets[@]}"; do
                read name secret <<< "${secrets[$key]}"
                token=$(oathtool --totp --base32 "$secret")
                tokens[$key]="$name $token"
            done
        fi

        # Format in columns
        ((cols = $(tput cols) / 28))
        ((rows = ${#tokens[@]} / cols))
        unset lines
        declare -a lines
        ((line = 0))
        for ((cnt = 0; cnt < ${#tokens[@]}; ++cnt)); do
            key=${keys[$cnt]}
            read name token <<< "${tokens[$key]}"
            printf -v lines[$line] '%s%s) %-10.10s: %s%7s' "${lines[$line]}" \
                "$key" "$name" "$token" ''
            ((line = line < rows? ++line: 0))
        done

        # Print the columns of tokens
        clear
        for ((cnt = 0; cnt < ${#lines[@]}; ++cnt)); do
            echo "${lines[$cnt]}"
        done
        echo -e '\n0) Exit\n'
    fi

    # Format and print the progress bar
    printf -v bar '%-030.*d' $remaining 0
    printf -v bar '%s' "${bar//0/${barstyle:0:1}}"
    printf -v bar '%s' "${bar// /${barstyle:1:1}}"
    now=$(date '+%Y-%m-%d %H:%M:%S')
    printf '\r   Remaining : %6d %s  %s ' $remaining "$bar" "$now"

    # Check for key press
    read -N 1 -t 1 -s key
    case "$key" in
        "")
            ;;
        0)
            # Exit
            echo
            break
            ;;
        [1-9a-zA-Z])
            # Copy token to clipboard
            if [[ -n "$XCLIP" && -n "${tokens[$key]}" ]]; then
                read name token <<< "${tokens[$key]}"
                $XCLIP -i <<< "$token"
            fi
            ;;
    esac
done
